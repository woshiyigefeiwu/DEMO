// Fill out your copyright notice in the Description page of Project Settings.


#include "AIController_Base.h"
#include "BehaviorTree/BehaviorTreeComponent.h"
#include "Demo1/AICharacter/AICharacter_Base.h"
#include "Demo1/Manager/MyGamestateBase.h"

AAIController_Base::AAIController_Base()
{
	M_BehaviorTree = CreateDefaultSubobject<UBehaviorTreeComponent>("MyTree");
	M_Blackboard = CreateDefaultSubobject<UBlackboardComponent>("MyBoard");
}

void AAIController_Base::OnPossess(APawn* InPawn)
{
	Super::OnPossess(InPawn);

	AAICharacter_Base* AI = Cast<AAICharacter_Base>(InPawn);
	if (AI && AI->GetBTree())
	{
		M_Blackboard->InitializeBlackboard(*AI->GetBTree()->BlackboardAsset);		// 初始化AI中的黑板，黑板是在行为树中的。
		M_BehaviorTree->StartTree(*AI->GetBTree());								//开始运行行为树
	}
}

void AAIController_Base::BeginPlay()
{
	Super::BeginPlay();
}

AAICharacter_Base* AAIController_Base::SelectTarget(EEnemySelectRule SelectRule, TArray<AAICharacter_Base*> AI_Array)
{
	if (SelectRule == EEnemySelectRule::FIRST || SelectRule == EEnemySelectRule::NONE)
	{
		return this->SelectTarget_First(AI_Array);
	}
	else if (SelectRule == EEnemySelectRule::NEAREST)
	{
		return this->SelectTarget_Nearest(AI_Array);
	}

	return nullptr;
}

// 找第一个发现的敌人（合法的）
AAICharacter_Base* AAIController_Base::SelectTarget_First(TArray<AAICharacter_Base*> AI_Array)
{
	AAICharacter_Base* Target = nullptr;

	while (AI_Array.Num() && (AI_Array[0] == nullptr || AI_Array[0]->IsDead()))
	{
		AI_Array.RemoveAt(0);
	}

	if (AI_Array.Num())
	{
		Target = AI_Array[0];
		AI_Array.RemoveAt(0);
	}
	return Target;
}

// 找距离最近的敌人
AAICharacter_Base* AAIController_Base::SelectTarget_Nearest(TArray<AAICharacter_Base*> AI_Array)
{
	// 这里得处理一下

	// 找一下所有的敌人的指针 -> 获取位置 -> 算一下到 this 的距离，然后存在另一个数组里（dis，AIi），然后排序，然后取出来，在原数组中删除。

	return nullptr;
}

UBlackboardComponent* AAIController_Base::GetBlackboard()
{
	return M_Blackboard;
}

// 主要做一些数据的处理
void AAIController_Base::PossessAIDead()
{
	GEngine->AddOnScreenDebugMessage(-1, 20, FColor::Red, "this is PossessAIDead(), DataUpdate");

	AAICharacter_Base* AI = Cast<AAICharacter_Base>(GetPawn());
	AMyGameStateBase* GS = Cast<AMyGameStateBase>(GetWorld()->GetGameState());
	
	if (GS)
	{
		GS->DeleteAI(AI);
	}
}

// AI 完成攻击之后的善后处理
void AAIController_Base::FinishAttack()
{
	GEngine->AddOnScreenDebugMessage(-1, 20, FColor::Yellow, "this is AAIController_CloseCombat::FinishAttack()");

	AAICharacter_Base* PossessAI = Cast<AAICharacter_Base>(GetPawn());
	if (PossessAI)
	{
		GetWorldTimerManager().SetTimer(M_TimerHandle, this, &AAIController_Base::ClearTimerHandle, PossessAI->AtkCD, false);
	}
}

// 清空定时器
void AAIController_Base::ClearTimerHandle()
{
	GEngine->AddOnScreenDebugMessage(-1, 20, FColor::Yellow, "this is AAIController_CloseCombat::ClearTimerHandle()");

	GetWorldTimerManager().ClearTimer(M_TimerHandle);
}